import React, { useEffect, useState, useRef } from 'react';
import { getWindow } from '../utils/scroll';

export default function Loader(props) {

    const [loaded, setLoaded] = useState(false);
    const pathRef = useRef(null);

    useEffect(() => {
        window.onmousemove = e => {
            pathRef.current.setAttribute('transform', `translate(${e.clientX - 700}, ${e.clientY - 400})`);
        }
        if (window.loaded) {
            console.log('This is the case');
            setLoaded(true);
        } else
            window.addEventListener('load', () => {
                window.loaded = true;
                setLoaded(true);
            });

        return () => { window.onmousemove = () => {} };
    }, [])

    const frames = [
        "M562.807,224.142C617.338,181.015 703.519,278.308 792.568,280.389C886.619,282.587 905.409,200.45 941.727,223.304C981.357,248.241 907.529,310.014 933.704,348.812C971.382,404.662 988.837,435.778 977.803,476.268C968.251,511.323 926.928,491.166 851.984,554.714C777.04,618.262 801.465,665.661 745.263,664.801C684.678,663.874 721.804,616.007 638.743,554.714C555.682,493.421 517.669,544.825 490.574,502.904C470.871,472.42 525.844,436.128 562.18,370.889C598.516,305.65 519.469,258.418 562.807,224.142Z",
        "M592.584,249.882C647.115,206.754 703.519,278.308 792.568,280.389C886.619,282.587 894.533,214.901 929.482,239.798C976.576,273.349 885.886,315.863 912.06,354.661C949.739,410.511 982.566,418.972 977.803,476.268C974.794,512.476 926.928,491.166 851.984,554.714C777.04,618.262 801.465,665.661 745.263,664.801C684.678,663.874 747.082,584.049 664.021,522.756C580.96,461.463 517.669,544.825 490.574,502.904C470.871,472.42 525.844,436.128 562.18,370.889C598.516,305.65 549.246,284.157 592.584,249.882Z",
        "M583.536,245.015C638.067,201.888 703.519,278.308 792.568,280.389C886.619,282.587 888.19,223.553 924.509,246.407C964.139,271.344 888.726,317.319 914.901,356.118C952.579,411.968 988.837,435.778 977.803,476.268C968.251,511.323 906.314,449.746 831.37,513.294C756.426,576.842 801.465,665.661 745.263,664.801C684.678,663.874 745.717,576.793 662.656,515.5C579.595,454.207 517.669,544.825 490.574,502.904C470.871,472.42 525.844,436.128 562.18,370.889C598.516,305.65 540.198,279.291 583.536,245.015Z",
        "M583.536,245.015C630.448,185.827 703.519,278.308 792.568,280.389C886.619,282.587 888.19,223.553 924.509,246.407C964.139,271.344 888.726,317.319 914.901,356.118C952.579,411.968 997.678,438.325 973.046,471.579C940.082,516.081 906.314,449.746 831.37,513.294C756.426,576.842 801.465,665.661 745.263,664.801C684.678,663.874 718.557,612.965 643.08,550.621C563.492,484.882 547.992,574.39 502.713,523.024C461.934,476.765 523.631,472.614 559.967,407.375C596.303,342.136 549.215,288.318 583.536,245.015Z",
        "M583.536,245.015C630.448,185.827 703.519,278.308 792.568,280.389C886.619,282.587 888.19,223.553 924.509,246.407C964.139,271.344 888.726,317.319 914.901,356.118C952.579,411.968 997.678,438.325 973.046,471.579C940.082,516.081 906.314,449.746 831.37,513.294C756.426,576.842 801.465,665.661 745.263,664.801C684.678,663.874 718.557,612.965 643.08,550.621C563.492,484.882 547.992,574.39 502.713,523.024C461.934,476.765 593.145,455.429 629.481,390.19C665.817,324.951 549.215,288.318 583.536,245.015Z",
        "M585.066,234.189C641.882,173.619 703.519,278.308 792.568,280.389C886.619,282.587 894.584,213.109 927.77,235.199C960.482,256.974 905.098,304.847 931.273,343.645C968.951,399.495 979.025,445.369 944.078,479.567C918.111,504.979 783.164,416.762 793.098,514.518C801.118,593.428 801.465,665.661 745.263,664.801C684.678,663.874 724.85,611.854 641.789,550.561C558.728,489.268 520.482,564.72 494.833,504.502C470.52,447.421 583.652,455.626 619.988,390.387C656.324,325.148 547.265,274.489 585.066,234.189Z",
        "M584.454,222.154C614.106,183.373 703.519,278.308 792.568,280.389C886.619,282.587 894.584,213.109 927.77,235.199C960.482,256.974 882.146,311.799 908.321,350.597C945.999,406.447 979.025,445.369 944.078,479.567C918.111,504.979 844.544,408.031 831.046,503.83C819.98,582.37 777.276,660.139 746.153,659.633C693.379,658.776 702.358,632.891 619.297,571.598C536.236,510.305 515.897,565.69 491.968,496.87C472.472,440.797 546.33,428.709 582.666,363.47C619.002,298.231 550.891,266.047 584.454,222.154Z",
        "M584.454,222.154C614.106,183.373 703.519,278.308 792.568,280.389C886.619,282.587 894.584,213.109 927.77,235.199C960.482,256.974 882.146,311.799 908.321,350.597C945.999,406.447 986.094,430.091 951.148,464.289C925.18,489.701 895.627,460.548 852.677,522.551C807.511,587.751 777.276,660.139 746.153,659.633C693.379,658.776 722.321,613.877 639.26,552.584C556.199,491.291 502.958,534.591 490.401,500.698C475.143,459.511 546.33,428.709 582.666,363.47C619.002,298.231 550.891,266.047 584.454,222.154Z"
    ];

    return <div className="fixed z-8 top-0 left-0 h-100v w-100v flex items-center justify-center" style={{
        transition: '0.2s',
        background: '#ddd',
        opacity: loaded ? '0' : '1',
        pointerEvents: loaded ? 'none' : 'all'
    }}>
        <div className="absolute top-0 left-0 w-100v h-100v bg-dark white flex items-center justify-center" style={{
            clipPath: 'url(#wobble)',
            WebkitClipPath: 'url(#wobble)'
        }}>
            <h1 className="white" style={{ fontSize: '50px' }}>Loading</h1>
        </div>

        <svg height="50" width="50">
            <clipPath id="wobble">
                <path d={frames[0]} ref={pathRef}>
                    <animate attributeName="d" values={`${frames.join(";")};${frames[0]}`} dur="3s" repeatCount="indefinite" />
                </path>
            </clipPath>
        </svg>
    </div>
}